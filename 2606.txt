#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
void dfs(int start, vector<int> computer[], bool check[])
{
	 check[start] = true;
	 for (int i = 0; i < computer[start].size(); i++)
	 {
		 int next = computer[start][i];
		 if (check[next] == false)
		 {
			 dfs(next, computer, check);
		 }
	 }
}
int main()
{
	int node, edge;// start = 1로 고정
	int cnt = 0;
	cin >> node >> edge;
	vector<int>* computer = new vector <int>[node+1];
	bool* check = new bool[node + 1];
	fill(check, check + node + 1, false);
	for (int i = 0; i < edge; i++)
	{
		int u, v;
 		cin >> u >> v;
		computer[u].push_back(v);
		computer[v].push_back(u);
	}
	dfs(1, computer, check);
	for (int i = 0; i <= node; i++)
	{
		if (check[i] == true)
			cnt += 1;
	}

	cout << cnt-1<< "\n";
}