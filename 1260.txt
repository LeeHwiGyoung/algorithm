#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;

void dfs(int start, vector<int> list[] , bool check[])
{
	check[start] = true;
	printf("%d ", start);
	for (int i = 0; i < list[start].size(); i++)
	{
		int next = list[start][i];
		if (check[next] == false)
			dfs(next, list, check);
	}
}
void bfs(int start, vector<int> list[], bool check[])
{
	queue<int> q;
	q.push(start);
	check[start] = true;
	while (!q.empty())
	{
		int tmp = q.front();
		q.pop();
		printf("%d ", tmp);
		for (int i = 0; i < list[tmp].size(); i++)
			if (check[list[tmp][i]] == false)
			{
				q.push(list[tmp][i]);
				check[list[tmp][i]] = true;
			}
	}
}
int main()
{
	int N, M, start;// N = 정점 M = 간선 start = 시작노드

	cin >> N >> M >> start;
	vector<int>* list = new vector <int>[N+1];
	bool* check = new bool[N + 1];
	fill(check, check + N+1 , false);
	for (int i = 0; i < M; i++)
	{
		int s, e;
		cin >> s >> e;
		list[s].push_back(e);
		list[e].push_back(s);
	}
	for (int i = 1; i <= N; i++)
		sort(list[i].begin(), list[i].end());
	dfs(start, list, check);
	printf("\n");
	fill(check, check + N + 1, false);
	bfs(start, list, check);
}